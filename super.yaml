# WORD syntax
# [-] [+] [&] [_] <letters>
#   [-] - don't print the trailing space from the previous word
#   [+] - print a trailing space after this word later on (can be removed by the next word)
#   [&] - is a key
#   [_] - a "keyword", start a new phrase

escape: simon

replay: rip


mangles:
    "_camel":
        firstXform: None
        xform: "lambda x : x[0].upper() + x[1:]"
    "_lama":
        xform: "lambda x : x[0].upper() + x[1:]"
    "_rhino":
        delimiter: _
        xform: unicode.upper
    "_squirrel":
        delimiter: _
        xform: unicode.lower
    "_despace": {}
    "_dotword":
        delimiter: .


keys:
    # special characters (meta words)
    "kick [<n>]": "tab:%(n)d"
    "gap [<n>]": "space:%(n)d"

    # Special Keys
    "sleigh [<n>]": "c-c:%(n)d"
    "func <n>": "f%(n)d"

    # Copy paste
    "barf [<n>]": "c-v:%(n)d"
    "chomp": "c-x"

    # Undo/Redo backspace
    "strike [<n>]": "c-z:%(n)d"
    "whack [<n>]": "backspace:%(n)d"
    "chop [<n>]": "backspace:%(n)d"
    "wax [<n>]": "delete:%(n)d"
    "chip [<n>]": "delete:%(n)d"

    # Navigation keys
    "leap up [<n>]": "up:%(n)d"
    "leap down [<n>]": "down:%(n)d"
    "leap right [<n>]": "right:%(n)d"
    "leap left [<n>]": "left:%(n)d"
    "leap top": "c-home"
    "leap bottom": "c-end"
    "page down [<n>]": "pgdown:%(n)d"
    "page up [<n>]": "pgup:%(n)d"


windowLeaps:
    "unix": "Remote Desktop Connection"
    "mail": " - Outlook"
    "reader": " - Adobe Acrobat Reader"
    "browse": " - Mozilla Firefox"
    "key [pass]": " - KeePass"
    "exel": " - Excel"
    "vim": " - GVIM"
    "work bench": "SQL Workbench"
    "chime": "Amazon Chime"
    "voice": "dragonexec"


commands:
    - grep
    - awk
    - chmod
    - vim


substitutions:
    # modifier keys
    - {from: ["+caps"], to: "_caps"} # shift
    - {from: ["+lift"], to: "_lift"} # shift
    - {from: ["+jab"], to: "_jab"} # cntl
    - {from: ["+jive"], to: "_jive"} # alt

    # word mangling
    - {from: ["+camel"], to: "_camel"}
    - {from: ["+lama"], to: "_lama"}
    - {from: ["+rhino"], to: "_rhino"}
    - {from: ["+squirrel"], to: "_squirrel"}

    # alphabet
    - {from: ["+al"], to: "-a"}
    - {from: ["+baz"], to: "-b"} # conflict: baz/bash
    - {from: ["+crow"], to: "-c"} # conflict: crow/row
    - {from: ["+dow"], to: "-d"}
    - {from: ["+eel"], to: "-e"}
    - {from: ["+fox"], to: "-f"}
    - {from: ["+grays"], to: "-g"}
    - {from: ["+hoax"], to: "-h"}
    - {from: ["+imp"], to: "-i"}
    - {from: ["+junk"], to: "-j"} # conflict: junk/chunk
    - {from: ["+kong"], to: "-k"}
    - {from: ["+loon"], to: "-l"} # conflict floon/loon
    - {from: ["+mike"], to: "-m"}
    - {from: ["+nack"], to: "-n"}
    - {from: ["+booz"], to: "-o"}
    - {from: ["+punk"], to: "-p"}
    - {from: ["+quox"], to: "-q"}
    - {from: ["+raz"], to: "-r"}
    - {from: ["+sing"], to: "-s"} # conflict sing/scene
    - {from: ["+tunk"], to: "-t"}
    - {from: ["+munk"], to: "-u"}
    - {from: ["+vack"], to: "-v"}
    - {from: ["+wump"], to: "-w"}
    - {from: ["+cross"], to: "-x"}
    - {from: ["+ying"], to: "-y"}
    - {from: ["+zoo"], to: "-z"}

    # special characters
    - {from: ["+scape"], to: "/-_\x1b"} # conflict escape/scape/skip
    - {from: ["+slap"], to: "-_\r"}
    - {from: ["+rock"], to: "-_("}
    - {from: ["+rocks"], to: "-+_()"}
    - {from: ["+rack"], to: "-+_)"} # conflict rack/whack
#    - {from: ["+rake"], to: "-+_)"} # experiment
    - {from: ["+brick"], to: "-_["}
    - {from: ["+bricks"], to: "-+_[]"}
    - {from: ["+brack"], to: "-+_]"}
    - {from: ["+squirm"], to: "_{"}
    - {from: ["+squack"], to: "-_}"}
    - {from: ["+tent"], to: "-_^"}
    - {from: ["+bent"], to: "-_<"}
    - {from: ["+vent"], to: "-_>"}
    - {from: ["+slash"], to: "-_/"}
    - {from: ["+blash"], to: "-_\\"}
    - {from: ["+quotes"], to: "-_\""}
    - {from: ["+quote"], to: "-_'"} # conflict: quote/quota
    - {from: ["+ticker"], to: "-_`"}
    - {from: ["+fist"], to: "-_@"}
    - {from: ["+bench"], to: "-_&"}
    - {from: ["+boom"], to: "-_!"}
    - {from: ["+ching"], to: "-_$"}
    - {from: ["+dasher"], to: "-_-"}
    - {from: ["+adder"], to: "-_+"}
    - {from: ["+quest"], to: "-_?"}
    - {from: ["+sharp"], to: "-_#"}
    - {from: ["+spark"], to: "-_*"}
    - {from: ["+sparker"], to: "+_*"}
    - {from: ["+under"], to: "-__"}
    - {from: ["+wormey"], to: "-_~"}
    - {from: ["+pipe"], to: "-_|"}
    - {from: ["+piper"], to: "-_ | "}
    - {from: ["+pox"], to: "-_%"} # conflict: pox/fox
    - {from: ["+quiv"], to: "-_="}
    - {from: ["+clunk"], to: "-+_,"}
    - {from: ["+clink"], to: "-_:"}
    - {from: ["+slim"], to: "-+_;"}
    - {from: ["+dot"], to: "-_."}

    # unix cli
    - {from: ["+scat"], to: "-_cd "}
    - {from: ["+dupe"], to: "-_cp "}
    - {from: ["+trout"], to: "-_mv "}
    - {from: ["+zap"], to: "-_rm "}
    - {from: ["+ground"], to: "_~/"}
    - {from: ["+dark"], to: "_../"}
    - {from: ["+dirt"], to: "_./"}
    - {from: ["+cron", "+tab"], to: "+crontab"}
    - {from: ["+gitter"], to: "+git"}

    # java
    - {from: ["+maven"], to: "-_mvn "}
    - {from: ["+slamo"], to: "-<>();"}
    - {from: ["+inter"], to: "+int"}
    - {from: ["+print", "+line"], to: "-println("}

    # General programming help
    - {from: ["+slam"], to: "-();"}
    - {from: ["+tar ", "+get"], to: "target "}
    - {from: ["+short", "+source"], to: "+src"}

    # Alternatives to conflicts
    - {from: ["+conjunction"], to: "+and"} # end/and

    # vim
    - {from: ["-vim ", "+diff"], to: "vimdiff "}
    - {from: ["-vim ", "+quit"], to: "-_:q\r"}
    - {from: ["-vim ", "+save"], to: "-_:wq\r"}

    # Python
    - {from: ["+dot", "+pie"], to: "-_.py "}
    - {from: ["+num", "+pie"], to: "+numpy "}


soundsLike:
    # for word mangling
    "dee space": "_despace"
    "dot word": "_dotword"

    # terminology
    "dot com": "-_.com"
    "ID": "+id"
    "you till": "+util"
    "you are el": "+url"
    "S. S. L.": "+ssl"
    "H. T. T. P.": "+http"
    "H. T. T. P. S.": "+https"
    "yah mole": "+yaml"
    "ree base": "+rebase"
    "in foe sehk": "+info-sec"
    "write for out": "+write"
    "plug in": "+plugin"
    "eenume": "+enum"
    "sink": "+sync"
    "jay sawn": "+json"
    "dee dupe": "+dedup"
    "to do": "+TODO"

    # Amazon
    "ace in": "+asin"

    # C/C++
#    "stir cat": "strcat"
#    "stir en cat": "strncat"
#    "stir copy": "strcpy"
#    "stir en copy": "strncpy"
#    "stir length": "strlen"
#    "mallock": "malloc"
#    "sub stir": "+substr"

    # Java
    "J. M. S.": "+jms"
    "J. D. B. C.": "+jdbc"
    "poe joe": "+pojo"
    "at link": "{@link "
    "sniff": "if ("
    "snile": "while ("
    "snore": "for ("
    "snitch": "switch ("

    # Generic calcations
    "calc not": "-_!"
    "calc quiv": "-_ == "
    "calc not quiv": "-_ != "
    "calc great": "-_ > "
    "calc great quiv": "-_ >= "
    "calc less": "-_ < "
    "calc less quiv": "-_ <= "
    "calc up": "-_ + "
    "calc down": "-_ - "
    "calc times": "-_ * "
    "calc divide": "-_ / "
    "calc mod": "-_ %% "
    "calc or": "-_ || "
    "calc bit or": "-_ | "
    "calc and": "-_ && "
    "calc bit and": "-_ & "
    "calc ex or": "-_ ^ "
    "calc ink": "-_++"
    "calc deck": "-_--"
    "calc set": "-_ = "
    "calc up set": "-_ += "
    "calc down set": "-_ -= "
    "calc times set": "-_ *= "
    "calc divide set": "-_ /= "
    "calc mod set": "-_ %= "
    "calc or set": "-_ ||= "
    "calc bit or set": "-_ |= "
    "calc and set": "-_ &&= "
    "calc bit and set": "-_ &= "
    "calc ex or set": "-_ ^= "

    "calc turn": "-_ ? "
    "calc else": "-_ : "

    "calc sum": "+sum"
    "calc min": "+min"
    "calc max": "+max"

    # Python
    "E. val": "+eval"
    "def": "-_def "
    "el if": "-_elif "
    "pie charm": "+pycharm"

    # Hadoop
#    "ha dupe": "hadoop "
#    "ha duper": "-hadoop fs -"

    # Scala
#    "scal ah": "+scala"
#    "sequence type": "_Seq["
#    "stream type": "_Stream["
#    "mapping type": "_Map["
#    "inter type": "+_Int"

    # Unix/bash commands
    "gaze dear": "-ll\r"
    "gaze where": "-pwd\r"
    "stream ed": "-sed "
    "make dear": "-mkdir "
    "ex args": "-xargs "
    "sue do": "-sudo "
    "my sequal | my SQL": "+mysql"


words:
    - "false"
    - "null"
    - "true"
    - accessor
    - add
    - address
    - age
    - all
    - alpha
    - amazon
    - ant
    - append
    - array
    - auth
    - auto
    - avoid
    - base
    - bash # conflict: bash/blash/baz
    - batch
    - beta # conflict: beta/data
    - bin
    - bit
    - blank
    - blob
    - body
    - bool
    - boolean
    - borrow
    - borrowed
    - brazil
    - break
    - buffer
    - buffered
    - build
    - button
    - byte
    - bytes
    - cache
    - carrier
    - carton
    - case
    - cat
    - cell
    - char
    - cipher
    - class
    - clean
    - client
    - clone
    - close
    - coalesce
    - collect
    - color
    - column
    - config
    - console
    - cookie
    - count
    - cron
    - curl
    - data
    - decryption
    - defined
    - deploy
    - describe
    - desk
    - device
    - devin
    - dict
    - dictionary
    - diff
    - divide
    - done
    - double
    - drop
    - dump
    - earth
    - echo
    - eclipse
    - else
    - empty
    - enable
    - engine
    - entry
    - error
    - fail
    - failed
    - fetch
    - find
    - float
    - flush
    - forwarding
    - freight
    - get
    - global
    - go
    - graph
    - group
    - hash
    - head
    - header
    - headers
    - height
    - hide
    - histogram
    - hive
    - ignore
    - import
    - inner
    - input
    - integer
    - inventory
    - is
    - iterable
    - iterate
    - iterator
    - jar
    - java
    - jira
    - join
    - key
    - kill
    - kubernetes
    - lambda
    - len
    - length
    - less
    - lib
    - line
    - lines
    - link
    - list
    - log
    - logger
    - lot
    - macro
    - make
    - man
    - mangle
    - merge
    - meta
    - method
    - metro
    - mock
    - none
    - normalize
    - num
    - obscure
    - octet
    - octets
    - odin
    - open
    - optimize
    - optimizer
    - order
    - origin
    - other
    - out
    - outer
    - output
    - pair
    - pallet
    - pallets
    - pandas
    - parens
    - parse
    - parsed
    - pause
    - phone
    - pickup
    - pie
    - pig
    - ping
    - print
    - pull
    - python
    - queue
    - queues
    - quiz
    - quota # conflict: quota/quota hana/quarter/quote tar
    - raise
    - rank
    - raw
    - read
    - repeater
    - request
    - response
    - rest
    - root
    - row
    - rows
    - run
    - scan
    - select
    - sequence
    - serializable
    - serialize
    - service
    - shape
    - share
    - ship
    - show
    - sign
    - size
    - sock
    - socket
    - span
    - split
    - stop
    - stream
    - string
    - tab
    - table
    - tag
    - tags
    - tail
    - template
    - then
    - theta
    - this
    - threshold
    - token
    - tokenize
    - tool
    - top
    - trim
    - trunk
    - tunnel
    - tuple
    - type
    - types
    - unstacked
    - velocity
    - vendor
    - void
    - warm
    - weight
    - when
    - while
    - width
    - will
    - with
    - work
    - zip

